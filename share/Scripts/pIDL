#!/usr/bin/perl -s
#  Copyright (C) 2002 Regents of the University of Michigan, 
#  portions used with permission 
#  For more information, see http://csem.engin.umich.edu/tools/swmf

my $Help          = ($h or $help or $H or $HELP);
my $Keep          = ($k or $keep or $K or $KEEP);
my $MakeMovie     = ($m or $M or $movie or $MOVIE);
my $KeepMovieOnly = ($M or $MOVIE);
my $Verbose       = ($v or $V or $verbose or $VERBOSE);
my $Quiet         = ($q or $quiet or $Q or $QUIET);
my $Ccmc          = ($CCMC or $ccmc);
my $Input         = ($i or $input);
my $nThread       = ($n or 4);
my $Sleep         = ($s or $sleep);
my $Format        = ($f or $format);

# Allow in-place editing
$^I = "";

use strict;

my $ERROR = "ERROR in pIDL";
my $WARNING = "WARNING in pIDL";

&print_help if $Help;

my $Pwd     = `pwd`; chop $Pwd;
my $PostIdl = "$Pwd/PostIDL.exe";

# Set default pattern
my $Pattern;
if($ARGV[0]){
    $Pattern = $ARGV[0];
}else{
    foreach ("IO2", "plots", "output", "Output"){
	next unless -d $_;
	$Pattern = $_."/";
	last;
    }
}

die "No directory/pattern was set\n" unless $Pattern;

# Split $Pattern into a directory and the basename for the files
my $Dir;
if($Pattern =~ /\/([^\/]*)$/){
    $Dir = $`;
    $Pattern = $1;
}else{
    $Dir = $Pattern;
    $Pattern = '';
}
print "Dir = $Dir Pattern = $Pattern\n" if $Verbose;

die "$ERROR: no plot directory found in argument $ARGV[0]\n" unless $Dir;
die "$ERROR: plot directory $Dir does not exist\n" unless -d $Dir;

# Change into the plot directory
print "chdir $Dir\n" if $Verbose;
chdir $Dir or die "$ERROR: could not change directory into $Dir\n";

# Collect header files
opendir(DIR,'.');
my @HeaderFiles = sort grep /^$Pattern.*\.h$/, readdir(DIR);
closedir(DIR);

if(@HeaderFiles){
    die "$ERROR: $PostIdl is not available, please make PIDL\n" 
	unless -x $PostIdl;
    sleep $Sleep;
}elsif(not $MakeMovie){
    die "$WARNING: no header files were found\n";
}

# Success, go ahead and process files
my $nHeaderFile = $#HeaderFiles+1;
print "Number of header files=$nHeaderFile\n" unless $Quiet;
my $HeaderFile;

if($nThread > 1){
    foreach my $iThread (1..$nThread){
	# parent process does nothing
	next if fork();
	for (my $iFile = $iThread-1; $iFile<$nHeaderFile; $iFile+=$nThread){
	    $HeaderFile = $HeaderFiles[$iFile];
	    &process_file($HeaderFile);
	}
	exit;
    }
    foreach (1..$nThread){wait};
}else{
    foreach $HeaderFile (@HeaderFiles){&process_file($HeaderFile)}
}

# Done unless movie is to be made from the .out files
exit 0 unless $MakeMovie;

# Collect the .out files
opendir(DIR,'.');
my @OutFiles = sort(grep /^$Pattern.*\.out$/, readdir(DIR));
closedir(DIR);

# Group the .out files and save the last and first steps
my %Series;
my $OutFile;
for $OutFile (@OutFiles){
    my $BaseName = $OutFile;

    # Remove extension
    $BaseName =~ s/(_t[\.\d]+)?_[en][\d\-]+\.out$// or
	die "$ERROR: file name $OutFile does not match _[ent]TIMESTAMP.out format\n";

    # Store outfile
    push @{$Series{$BaseName}}, $OutFile;
}

my $BaseName;
foreach $BaseName (sort keys %Series){
    # Do not create movie if there is only one element in the series
    my @Series = @{$Series{$BaseName}};

    $_ = $Series[0];
    my $FirstStep;
    ($FirstStep) = /_n(\d+)/;

    $_ = $Series[-1];
    my $LastStep;
    ($LastStep) = /_n(\d+)/;

    # Convert step strings to numbers
    $FirstStep += 0;
    $LastStep  += 0;

    # Check if there is an old movie file
    my @OldMovieFiles; 
    @OldMovieFiles = glob("$BaseName*.outs");
    my $OldMovieFile;

    if(@OldMovieFiles){
	die "$ERROR: multiple .outs files with the same base name: ".
	    "@OldMovieFiles\n" if $#OldMovieFiles > 0;

	my $OldMovieFile = $OldMovieFiles[0];

	$OldMovieFile =~ /$BaseName\_n(\d+)_(\d+)\.outs/
	    or die "$ERROR: file name $OldMovieFile does not match ".
	    "_nFIRST_LAST.outs\n";

	my $OldFirstStep = $1;
	my $OldLastStep  = $2;

	my $NewMovieFile = "${BaseName}_n${OldFirstStep}_${LastStep}.outs";
	if($FirstStep > $OldLastStep){
	    print "Creating $Dir/$NewMovieFile from $Dir/$OldMovieFile\n" 
		unless $Quiet;
	    &system("cat @Series >> $OldMovieFile");
	    &system("mv $OldMovieFile $NewMovieFile");
	}elsif($FirstStep == $OldFirstStep and $LastStep == $OldLastStep){
	    print "Rewriting $Dir/$OldMovieFile\n" unless $Quiet;
	    unlink($OldMovieFile);
	    &system("cat @Series > $OldMovieFile");
	}elsif($FirstStep == $OldFirstStep and $LastStep > $OldLastStep){
	    print "Replacing $Dir/$OldMovieFile with $Dir/$NewMovieFile\n" 
		unless $Quiet;
	    unlink($OldMovieFile);
	    &system("cat @Series > $NewMovieFile");
	}else{
	    warn "$WARNING: movie file $Dir/$OldMovieFile does not seem to ".
		"belong\nto the $Dir/$Series[0] ... $Dir/$Series[-1] files\n";
	    next;
	}
    }else{
	# do not make movie file from a single file
	next if $FirstStep eq $LastStep;

	my $NewMovieFile = "${BaseName}_n${FirstStep}_${LastStep}.outs";

	print "Creating $Dir/$NewMovieFile\n" unless $Quiet;

	&system("cat @Series > $NewMovieFile");
    }
    # Remove the .out files if requested
    &system("rm -f @Series") if $KeepMovieOnly;
}

exit 0;

##############################################################################

sub system{
    my $Command = join(' ',@_); 
    print "$Command\n" if $Verbose;
    `$Command`;
}

sub process_file{
    my $HeaderFile = shift;
    my $BaseFile = $HeaderFile; $BaseFile =~ s/\.h$//;

    if($Format){
	@ARGV = ("$HeaderFile");
	while(<>){
	    s/(\s*\-1\.0*E\+0*){3}/0.0 0.0 0.0/ if /plot_dx/;
	    s/ascii|real4|real8|tec/$Format/;
	    print;
	}
    }

    print "PostIDL.exe < $HeaderFile\n" unless $Quiet;
    my $OutFile = "$BaseFile.out";
    my $Output= `$PostIdl < $HeaderFile` unless -s $OutFile and $Ccmc;
    my $Error = ($Output =~ /error/i or $?);
    my $Warning = join("\n",grep /warning/i, split("\n",$Output));
    print "$Warning\n" if $Warning and not ($Quiet or $Error);
    print $Output if $Verbose or $Error;
    die "$ERROR: error found in the output of $PostIdl\n" if $Error; 
    die "$ERROR: no out file $OutFile was produced\n" 
	unless -s $OutFile or -s "$BaseFile.dat";
    rename $OutFile, "$BaseFile.dat" if $Format eq "tec";
    unless($Keep){
	if($BaseFile =~ /[23]d_/ or $BaseFile =~ /1d_/ and $Input){
	    # Keep header file if file name is 2d_ or 3d_, or 1d_ and -i is set.
	    # Rename header file to .info so it is not postprocessed again.
	    # Unfortunately CCMC insists on using .h extension... 
	    rename $HeaderFile, $BaseFile.".info" unless $Ccmc;
	}else{
	    my $TreeFile = $HeaderFile; $TreeFile =~ s/\.h$/.tree/;
	    unlink $HeaderFile;
	    unlink $TreeFile if -e $TreeFile;
	}
	unlink glob("$BaseFile*.idl");
	print "unlink ",join(" ",glob("$BaseFile*.idl")),"\n" if $Verbose;
    }
}

##############################################################################

sub print_help{
    print "
Purpose: 
   Combine *.idl files written out separately by the processors 
   into .out files using the PostIDL.exe code. 
   Create .outs movies from the .out files if requested.

Usage:
   pIDL [-h] [-v] [-q] [-i] [-k] [-ccmc] [-f=ascii|real4|real8|tec]
        [-m|M] [-n=NUMBER] [BASENAME]

   -h -help    - print this help message
   -v -verbose - print verbose information
   -q -quiet   - do not print any information
   -i -input   - rename .h to .info and keep .tree file for 1d_ files,
                 so that the IDL file can be used as input for READAMR.
   -k -keep    - keep the .h and .idl files. Default is to delete them.
   -ccmc       - keep the .h file for 3d_ files. This is needed by CCMC.
   -f=FORM     - overwrite the output format with FORM that has the following
   -format=FORM  options: ascii, real4, real8, tec
   -m -movie   - create movie from the .out files and keep the .out files
   -M -MOVIE   - create movie from the .out files and delete the .out files
   -n=NUMBER   - execute PostIDL.exe in parallel on NUMBER cores. Default is 4.
   -s=SECONDS  - sleep SECOND seconds before processing files.
   BASENAME    - the beginning of the filenames to be processed.
                 Default value is BASENAME='IO2/'

Examples:
   Process all files in the IO2/ directory and remove .idl files:
pIDL

   Do the same in parallel using 8 threads
pIDL -n=8

   Process all files in the IO2/ directory, create .outs movies and remove
   all the .h, .idl and .out files:
pIDL -M

   Process all files in the Plots/ directory, create .outs movies
   but keep the .h, .idl and .out files as well:
pIDL -k -m Plots/

   Process all files in IO2, rename .h to .info and keep .tree files:
pIDL -i

   Process files starting with Plots/y=0, convert to tecplot format
   (with uniform resolution!) and print verbose information:
pIDL -v -f=tec Plots/y=0
";
   exit 0;
}

